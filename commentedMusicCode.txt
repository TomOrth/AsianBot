/*if(msg.content.startsWith(PREFIX + "play")) {
    let input = msg.content.slice(6);
    if(input.length > 1) {
      msg.channel.sendMessage('Searching for video...');
      search(input, opts, function(err, results) {
        if(err) return console.log(err);
        console.dir(results);
        var url = results[0].link;
        yt.getInfo(url, (err, info) => {
          if(err) {
            return msg.channel.sendMessage('Invalid video: ' + err);
          }
          if (!queue.hasOwnProperty(msg.guild.id)) queue[msg.guild.id] = {}, queue[msg.guild.id].playing = false, queue[msg.guild.id].songs = [], queue[msg.guild.id].dispatcher = null;
          queue[msg.guild.id].songs.push({url: url, title: info.title, requester: msg.author.username});
          msg.channel.sendMessage(`Added **${info.title}** to the queue`);
          if (!queue[msg.guild.id].playing) {
            const voiceChannel = msg.member.voiceChannel;
            if (!voiceChannel) {
              return message.reply(`Please be in a voice channel first!`);
            }
            var song = {url: url, title: info.title, requester: msg.author.username};
            console.log(song);
            if (song === undefined) {
              queue[msg.guild.id].playing = false;
              return msg.channel.sendMessage('Queue is empty');
            }
            let stream = yt(song.url, { audioonly: true }, { passes : passes });
            let connection = bot.voiceConnections.find('channel', msg.member.voiceChannel);
            queue[msg.guild.id].dispatcher = connection.playStream(stream);
            msg.channel.sendMessage(`Playing: **${song.title}** as requested by: **${song.requester}**`);
          }
          return;
        });
      });
    }

    if (queue[msg.guild.id] === undefined) return msg.channel.sendMessage(`Add some songs to the queue first with ${PREFIX}add`);
      if (!bot.voiceConnections.exists('channel', msg.member.voiceChannel)) return msg.channel.sendMessage(`Join me to a voice channel with ${PREFIX}summon first`);
      if (queue[msg.guild.id].playing) return msg.channel.sendMessage('Already Playing');

    if (!queue[msg.guild.id].playing) {
      let voiceChannel = msg.member.voiceChannel;
      if (!voiceChannel) {
        return message.reply(`Please be in a voice channel first!`);
      }

      voiceChannel = bot.voiceConnections.find('channel', msg.member.voiceChannel);
      var song = queue[msg.guild.id].songs[0];
      if (song === undefined) {
        queue[msg.guild.id].playing = false;
        return msg.channel.sendMessage('Queue is empty');
      }

        msg.channel.sendMessage(`Playing: **${song.title}** as requested by: **${song.requester}**`);
      var songToPlay = queue[msg.guild.id].songs[0];
        queue[msg.guild.id].dispatcher = voiceChannel.playStream(yt(songToPlay.url, { audioonly: true }), { passes : passes });

        queue[msg.guild.id].dispatcher.on('end', () => {
          collector.stop();
          queue[msg.guild.id].songs.shift();
          play(queue[msg.guild.id].songs[0]);
        });
        queue[msg.guild.id].dispatcher.on('error', (err) => {
          return msg.channel.sendMessage('error: ' + err).then(() => {
            collector.stop();
            queue[msg.guild.id].songs.shift();
            play(queue[msg.guild.id].songs[0]);
          });
        });
    }

    console.log(queue);
      (function play(song) {
        console.log(song);
        if (song === undefined) {
        queue[msg.guild.id].playing = false;
        return msg.channel.sendMessage('Queue is empty');
      }

        msg.channel.sendMessage(`Playing: **${song.title}** as requested by: **${song.requester}**`);
      var songToPlay = queue[msg.guild.id].songs[0];
        queue[msg.guild.id].dispatcher = voiceChannel.playStream(yt(songToPlay.url, { audioonly: true }), { passes : passes });

        queue[msg.guild.id].dispatcher.on('end', () => {
          collector.stop();
          queue[msg.guild.id].songs.shift();
          play(queue[msg.guild.id].songs[0]);
        });
        queue[msg.guild.id].dispatcher.on('error', (err) => {
          return msg.channel.sendMessage('error: ' + err).then(() => {
            collector.stop();
            queue[msg.guild.id].songs.shift();
            play(queue[msg.guild.id].songs[0]);
          });
        });
      })(queue[msg.guild.id].songs[0]);
  } else if(msg.content.startsWith(PREFIX + "summon")) {
    const voiceChannel = msg.member.voiceChannel;
    if (!voiceChannel || voiceChannel.type !== 'voice') return msg.reply('I couldn\'t connect to your voice channel...');
    voiceChannel.join();
  } else if(msg.content.startsWith(PREFIX + "disconnect")) {
    const voiceChannel = msg.member.voiceChannel;
    if (!voiceChannel || voiceChannel.type !== 'voice') return msg.reply('I couldn\'t leave your voice channel...');
    voiceChannel.leave();
  } else if(msg.content.startsWith(PREFIX + "queue")) {
    let input = msg.content.slice(5);
    msg.channel.sendMessage('Searching for video...');

    search(input, opts, function(err, results) {
      if(err) return console.log(err);
      console.dir(results);
      var url = results[0].link;
      yt.getInfo(url, (err, info) => {
        if(err) {
          return msg.channel.sendMessage('Invalid video: ' + err);
        }
        if (!queue.hasOwnProperty(msg.guild.id)) queue[msg.guild.id] = {}, queue[msg.guild.id].playing = false, queue[msg.guild.id].songs = [];
        queue[msg.guild.id].songs.push({url: url, title: info.title, requester: msg.author.username});
        msg.channel.sendMessage(`added **${info.title}** to the queue`);
      });
    });
  } else if (msg.content.startsWith(PREFIX + 'pause')) {
    if(queue[msg.guild.id].dispatcher != null) {
      msg.channel.sendMessage('Music paused!');
      queue[msg.guild.id].dispatcher.pause();
    }
    } else if (msg.content.startsWith(PREFIX + 'resume')){
    if(queue[msg.guild.id].dispatcher != null) {
      msg.channel.sendMessage('Music resumed!');
      queue[msg.guild.id].dispatcher.resume();
    }
    } else if (msg.content.startsWith(PREFIX + 'skip')){
    if(queue[msg.guild.id].dispatcher != null) {
      msg.channel.sendMessage('Music skipped!');
      queue[msg.guild.id].dispatcher.end();
    }
    }*/



    /*function getQueue(guild) {
    	if (!guild) return
    	if (typeof guild == 'object') guild = guild.id
    	if (queues[guild]) return queues[guild]
    	else queues[guild] = []
    	return queues[guild]
    }*/
